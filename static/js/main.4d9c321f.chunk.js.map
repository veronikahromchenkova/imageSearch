{"version":3,"sources":["components/imageCard.js","components/imageList.js","components/searchBar.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","imageRef","useRef","useState","spans","setSpans","useEffect","current","addEventListener","calculateSpans","height","clientHeight","spansRows","Math","ceil","className","style","gridRowEnd","ref","src","image","urls","small","alt","alt_description","href","user","portfolio_url","name","onClick","url","links","download_location","axios","get","headers","Authorization","then","res","a","document","createElement","data","click","xmlns","viewBox","d","ImageList","images","foundImages","map","img","index","key","id","SearchBar","onSubmit","event","preventDefault","emptyImageArray","searchImages","type","autoComplete","placeholder","onChange","setKeyword","target","value","App","clientId","keyword","setImages","loading","setLoading","page","setPage","title","setTitle","hasMore","setHasMore","per_page","params","query","response","newImages","results","catch","err","console","log","loader","color","width","input","length","next","dataLength","endMessage","textAlign","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4d9c321f.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport axios from \"axios\";\n\nconst ImageCard = (props) => {\n\n    const imageRef = useRef();\n    const [spans, setSpans] = useState(0);\n\n    useEffect(() => {\n        imageRef.current.addEventListener('load', calculateSpans);\n    });\n\n    const calculateSpans = () => {\n        const height = imageRef.current.clientHeight;\n        const spansRows = Math.ceil(height / 10 );\n        setSpans(spansRows);\n    };\n\n    const downloadImage = () => {\n        const url = props.image.links.download_location;\n        axios.get(url, {\n            headers: {\n                Authorization: 'Client-ID 45ENxImi0H7rjXGOdnzQthNGD7ES3Jf9KaFzHTRvA0o'\n            }\n        }).then(res => {\n            let a = document.createElement('a');\n            a.href = res.data.url + \"&dl=\"+ props.image.alt_description +\".jpg\";\n            a.click();\n        });\n    };\n\n    return (\n        <div className=\"imageCard\" style={{gridRowEnd: `span ${spans}`}}>\n            <img\n                ref={imageRef}\n                src={props.image.urls.small}\n                alt={props.image.alt_description}\n            />\n            <div className=\"cardFooter\">\n                <a className=\"author\" href={props.image.user.portfolio_url}>By {props.image.user.name}</a>\n                <a className=\"downloadBtn\" href={\"#\"} onClick={downloadImage}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 471.2 471.2\"><path d=\"M457.7 230.15c-7.5 0-13.5 6-13.5 13.5v122.8c0 33.4-27.2 60.5-60.5 60.5H87.5c-33.4 0-60.5-27.2-60.5-60.5v-124.8c0-7.5-6-13.5-13.5-13.5s-13.5 6-13.5 13.5v124.8c0 48.3 39.3 87.5 87.5 87.5h296.2c48.3 0 87.5-39.3 87.5-87.5v-122.8c0-7.4-6-13.5-13.5-13.5z\"/><path d=\"M226.1 346.75c2.6 2.6 6.1 4 9.5 4s6.9-1.3 9.5-4l85.8-85.8c5.3-5.3 5.3-13.8 0-19.1-5.3-5.3-13.8-5.3-19.1 0l-62.7 62.8V30.75c0-7.5-6-13.5-13.5-13.5s-13.5 6-13.5 13.5v273.9l-62.8-62.8c-5.3-5.3-13.8-5.3-19.1 0-5.3 5.3-5.3 13.8 0 19.1l85.9 85.8z\"/></svg>\n                </a>\n            </div>\n            <div className=\"cover\"></div>\n        </div>\n    )\n};\n\nexport default ImageCard;","import React from 'react';\nimport ImageCard from \"./imageCard\";\n\nconst ImageList = (props) => {\n\n    const images = props.foundImages.map((img, index) => {\n        return <ImageCard key={index + '-' + img.id} image={img} />\n    });\n\n    return (\n        <div>\n            <div className=\"imageList\">{images}</div>\n        </div>\n    )\n}\n\nexport default ImageList;","import React, {useState} from 'react';\n\nconst SearchBar = (props) => {\n\n    function inputHandler(event){\n        props.setKeyword(event.target.value);\n    }\n\n    function onFormSubmit(event){\n        event.preventDefault();\n        props.emptyImageArray();\n        props.searchImages();\n    }\n\n    return (\n        <div className=\"searchBlock\">\n            <h1>Search free photos from Unsplash</h1>\n            <form onSubmit={onFormSubmit}>\n                <input\n                    className=\"keywordInput\"\n                    type=\"text\"\n                    name=\"photo\"\n                    autoComplete=\"off\"\n                    placeholder=\"Search photos by a keyword\"\n                    onChange={inputHandler}\n                />\n                <input className=\"submitBtn\" type={\"submit\"} value={\"Search\"}/>\n            </form>\n        </div>\n    )\n}\n\nexport default SearchBar;","import React, {useState, useEffect} from 'react';\nimport './App.scss';\nimport axios from 'axios';\nimport ImageList from './components/imageList';\nimport SearchBar from \"./components/searchBar\";\nimport Loader from 'react-loader-spinner'\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nfunction App() {\n\n    const [clientId] = useState(\"45ENxImi0H7rjXGOdnzQthNGD7ES3Jf9KaFzHTRvA0o\");\n    const [keyword, setKeyword] = useState(\"\");\n    const [images, setImages] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [page, setPage] = useState(1);\n    const [title, setTitle] = useState(\"Image Search app\");\n    const [hasMore, setHasMore] = useState(true);\n\n\n    useEffect(() => {\n        document.title = title;\n    },[title]);\n\n    async function searchImages(page= 1, per_page= 30){\n        setLoading(true);\n        const url = \"https://api.unsplash.com/search/photos\";\n        await axios.get(url, {\n            params: {\n                query: keyword,\n                page: page,\n                per_page: per_page\n            },\n            headers: {\n                Authorization: 'Client-ID '+clientId\n            }\n        })\n            .then(response => {\n                setLoading(false);\n                setTitle(keyword + \" Pictures\");\n                const newImages = [...images,...response.data.results];\n                setImages(newImages);\n            })\n            .catch(err => {\n                setHasMore(false);\n                console.log(err);\n            });\n    }\n\n    const keywordInputHandler = (input) => {\n        setKeyword(input);\n    };\n\n    const emptyImageArray = () => {\n        images.length = 0;\n        setHasMore(true);\n    };\n\n    let loader = (loading) ? <Loader type=\"ThreeDots\" color=\"#somecolor\" height={80} width={80} /> : '';\n\n    return (\n        <div className=\"App\">\n            <SearchBar searchImages={searchImages} setKeyword={keywordInputHandler} emptyImageArray={emptyImageArray} />\n            <InfiniteScroll\n                className=\"infiniteScroll\"\n                next={() => {\n                    searchImages(page+1,5);\n                    setPage(page+1);\n                }}\n                hasMore={hasMore}\n                loader={loader}\n                dataLength={images.length}\n                endMessage={\n                    <p style={{textAlign: 'center', marginBottom: 40}}>\n                        <b>You have seen it all</b>\n                    </p>\n                }\n            >\n                <ImageList foundImages={images} loading={loading} />\n            </InfiniteScroll>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}